// <auto-generated />
using System;
using ActivityReservation.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ActivityReservation.DataAccess.Migrations
{
    [DbContext(typeof(ReservationDbContext))]
    partial class ReservationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ActivityReservation.Models.BlockEntity", b =>
                {
                    b.Property<Guid>("BlockId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BlockTime");

                    b.Property<Guid>("BlockTypeId");

                    b.Property<string>("BlockValue");

                    b.Property<bool>("IsActive");

                    b.HasKey("BlockId");

                    b.HasIndex("BlockTypeId");

                    b.ToTable("tabBlockEntity");
                });

            modelBuilder.Entity("ActivityReservation.Models.BlockType", b =>
                {
                    b.Property<Guid>("TypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TypeName");

                    b.HasKey("TypeId");

                    b.ToTable("tabBlockType");
                });

            modelBuilder.Entity("ActivityReservation.Models.DisabledPeriod", b =>
                {
                    b.Property<Guid>("PeriodId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("RepeatYearly");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("PeriodId");

                    b.ToTable("tabDisabledPeriod");
                });

            modelBuilder.Entity("ActivityReservation.Models.Notice", b =>
                {
                    b.Property<Guid>("NoticeId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckStatus");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NoticeContent");

                    b.Property<string>("NoticeCustomPath");

                    b.Property<string>("NoticeDesc");

                    b.Property<string>("NoticeExternalLink");

                    b.Property<string>("NoticeImagePath");

                    b.Property<string>("NoticePath");

                    b.Property<DateTime>("NoticePublishTime");

                    b.Property<string>("NoticePublisher");

                    b.Property<string>("NoticeTitle");

                    b.Property<int>("NoticeVisitCount");

                    b.Property<string>("UpdateBy");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("NoticeId");

                    b.ToTable("tabNotice");
                });

            modelBuilder.Entity("ActivityReservation.Models.OperationLog", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IpAddress");

                    b.Property<string>("LogContent");

                    b.Property<string>("LogModule");

                    b.Property<string>("OperBy");

                    b.Property<DateTime>("OperTime");

                    b.HasKey("LogId");

                    b.ToTable("tabOperationLog");
                });

            modelBuilder.Entity("ActivityReservation.Models.Reservation", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ReservationActivityContent");

                    b.Property<DateTime>("ReservationForDate");

                    b.Property<string>("ReservationForTime");

                    b.Property<string>("ReservationFromIp");

                    b.Property<int>("ReservationPeriod");

                    b.Property<string>("ReservationPersonName");

                    b.Property<string>("ReservationPersonPhone");

                    b.Property<Guid>("ReservationPlaceId");

                    b.Property<int>("ReservationStatus");

                    b.Property<DateTime>("ReservationTime");

                    b.Property<string>("ReservationUnit");

                    b.Property<string>("UpdateBy");

                    b.Property<string>("UpdateMemo");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ReservationId");

                    b.HasIndex("ReservationPlaceId");

                    b.ToTable("tabReservation");
                });

            modelBuilder.Entity("ActivityReservation.Models.ReservationPeriod", b =>
                {
                    b.Property<Guid>("PeriodId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("PeriodDescription");

                    b.Property<int>("PeriodIndex");

                    b.Property<string>("PeriodTitle");

                    b.Property<Guid>("PlaceId");

                    b.Property<string>("UpdateBy");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("PeriodId");

                    b.HasIndex("PlaceId");

                    b.ToTable("tabReservationPeriod");
                });

            modelBuilder.Entity("ActivityReservation.Models.ReservationPlace", b =>
                {
                    b.Property<Guid>("PlaceId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDel");

                    b.Property<int>("MaxReservationPeriodNum");

                    b.Property<int>("PlaceIndex");

                    b.Property<string>("PlaceName");

                    b.Property<string>("UpdateBy");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("PlaceId");

                    b.ToTable("tabReservationPlace");
                });

            modelBuilder.Entity("ActivityReservation.Models.SystemSettings", b =>
                {
                    b.Property<Guid>("SettingId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName");

                    b.Property<string>("SettingName");

                    b.Property<string>("SettingValue");

                    b.HasKey("SettingId");

                    b.ToTable("tabSystemSettings");
                });

            modelBuilder.Entity("ActivityReservation.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<bool>("IsEnabled");

                    b.Property<bool>("IsSuper");

                    b.Property<string>("UserMail");

                    b.Property<string>("UserName");

                    b.Property<string>("UserPassword");

                    b.HasKey("UserId");

                    b.ToTable("tabUser");
                });

            modelBuilder.Entity("ActivityReservation.Models.WechatMenuConfig", b =>
                {
                    b.Property<Guid>("ConfigId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ButtonKey");

                    b.Property<string>("ButtonType");

                    b.Property<Guid>("ParentId");

                    b.Property<string>("Remark");

                    b.HasKey("ConfigId");

                    b.ToTable("tabWechatMenuConfig");
                });

            modelBuilder.Entity("ActivityReservation.Models.BlockEntity", b =>
                {
                    b.HasOne("ActivityReservation.Models.BlockType", "BlockType")
                        .WithMany()
                        .HasForeignKey("BlockTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ActivityReservation.Models.Reservation", b =>
                {
                    b.HasOne("ActivityReservation.Models.ReservationPlace", "Place")
                        .WithMany()
                        .HasForeignKey("ReservationPlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ActivityReservation.Models.ReservationPeriod", b =>
                {
                    b.HasOne("ActivityReservation.Models.ReservationPlace", "ReservationPlace")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
