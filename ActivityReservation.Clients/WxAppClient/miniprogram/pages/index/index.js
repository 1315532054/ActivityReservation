"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ReservationService_1 = require("../../services/ReservationService");
var app = getApp();
var reservationSvc = new ReservationService_1.ReservationService();
Page({
    data: {
        userInfo: {},
        hasUserInfo: false,
        canIUse: wx.canIUse('button.open-type.getUserInfo'),
        pageNum: 1,
        pageSize: 10,
        totalPage: 1,
        totalCount: 0,
        reservations: []
    },
    onLoad: function () {
        console.log("onLoad");
        this.loadReservation(1, 10);
    },
    onShow: function () {
        console.log("onShow");
        this.loadReservation(1, 10);
    },
    prevPage: function () {
        this.loadReservation(--this.data.pageNum, this.data.pageSize);
    },
    nextPage: function () {
        this.loadReservation(++this.data.pageNum, this.data.pageSize);
    },
    loadReservation: function (pageNum, pageSize) {
        var _this = this;
        if (pageSize === void 0) { pageSize = 10; }
        reservationSvc.Get(function (result) {
            console.log(result);
            _this.setData({
                pageNum: result.PageNumber,
                pageSize: result.PageSize,
                totalPage: result.PageCount,
                totalCount: result.TotalCount,
                reservations: result.Data
            });
        }, {
            pageNumber: pageNum,
            pageSize: pageSize
        });
    },
    getUserInfo: function (e) {
        console.log(e);
        app.globalData.userInfo = e.detail.userInfo;
        this.setData({
            userInfo: e.detail.userInfo,
            hasUserInfo: true
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLHdFQUF1RTtBQUV2RSxJQUFNLEdBQUcsR0FBRyxNQUFNLEVBQVUsQ0FBQTtBQUM1QixJQUFNLGNBQWMsR0FBRyxJQUFJLHVDQUFrQixFQUFFLENBQUM7QUFFaEQsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBQ0osUUFBUSxFQUFFLEVBQUU7UUFDWixXQUFXLEVBQUUsS0FBSztRQUNsQixPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQztRQUNuRCxPQUFPLEVBQUUsQ0FBQztRQUNWLFFBQVEsRUFBRSxFQUFFO1FBQ1osU0FBUyxFQUFFLENBQUM7UUFDWixVQUFVLEVBQUUsQ0FBQztRQUNiLFlBQVksRUFBRSxFQUF3QjtLQUN2QztJQUNELE1BQU07UUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBMkI5QixDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxlQUFlLEVBQWYsVUFBZ0IsT0FBYyxFQUFFLFFBQW9CO1FBQXBELGlCQWNDO1FBZCtCLHlCQUFBLEVBQUEsYUFBb0I7UUFDbEQsY0FBYyxDQUFDLEdBQUcsQ0FBQyxVQUFDLE1BQU07WUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNkLEtBQUssQ0FBQyxPQUFPLENBQUM7Z0JBQ2xCLE9BQU8sRUFBRSxNQUFNLENBQUMsVUFBVTtnQkFDMUIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRO2dCQUN6QixTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVM7Z0JBQzNCLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVTtnQkFDN0IsWUFBWSxFQUFFLE1BQU0sQ0FBQyxJQUFJO2FBQzFCLENBQUMsQ0FBQztRQUNMLENBQUMsRUFBRTtZQUNELFVBQVUsRUFBRSxPQUFPO1lBQ25CLFFBQVEsRUFBRSxRQUFRO1NBQ25CLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxXQUFXLEVBQVgsVUFBWSxDQUFNO1FBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDZCxHQUFHLENBQUMsVUFBVSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQTtRQUMzQyxJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1osUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUTtZQUMzQixXQUFXLEVBQUUsSUFBSTtTQUNsQixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbmRleC5qc1xyXG4vL+iOt+WPluW6lOeUqOWunuS+i1xyXG5pbXBvcnQgeyBJTXlBcHAgfSBmcm9tICcuLi8uLi9hcHAnO1xyXG5pbXBvcnQgeyBSZXNlcnZhdGlvbiB9IGZyb20gJy4uLy4uL21vZGVscy9SZXNlcnZhdGlvbic7XHJcbmltcG9ydCB7IFJlc2VydmF0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL1Jlc2VydmF0aW9uU2VydmljZSc7XHJcblxyXG5jb25zdCBhcHAgPSBnZXRBcHA8SU15QXBwPigpXHJcbmNvbnN0IHJlc2VydmF0aW9uU3ZjID0gbmV3IFJlc2VydmF0aW9uU2VydmljZSgpO1xyXG5cclxuUGFnZSh7XHJcbiAgZGF0YToge1xyXG4gICAgdXNlckluZm86IHt9LFxyXG4gICAgaGFzVXNlckluZm86IGZhbHNlLFxyXG4gICAgY2FuSVVzZTogd3guY2FuSVVzZSgnYnV0dG9uLm9wZW4tdHlwZS5nZXRVc2VySW5mbycpLFxyXG4gICAgcGFnZU51bTogMSxcclxuICAgIHBhZ2VTaXplOiAxMCxcclxuICAgIHRvdGFsUGFnZTogMSxcclxuICAgIHRvdGFsQ291bnQ6IDAsXHJcbiAgICByZXNlcnZhdGlvbnM6IFtdIGFzIEFycmF5PFJlc2VydmF0aW9uPlxyXG4gIH0sXHJcbiAgb25Mb2FkKCkge1xyXG4gICAgY29uc29sZS5sb2coYG9uTG9hZGApO1xyXG4gICAgdGhpcy5sb2FkUmVzZXJ2YXRpb24oMSwgMTApO1xyXG4gICAgLy8gaWYgKGFwcC5nbG9iYWxEYXRhLnVzZXJJbmZvKSB7XHJcbiAgICAvLyAgIHRoaXMuc2V0RGF0YSEoe1xyXG4gICAgLy8gICAgIHVzZXJJbmZvOiBhcHAuZ2xvYmFsRGF0YS51c2VySW5mbyxcclxuICAgIC8vICAgICBoYXNVc2VySW5mbzogdHJ1ZSxcclxuICAgIC8vICAgfSlcclxuICAgIC8vIH0gZWxzZSBpZiAodGhpcy5kYXRhLmNhbklVc2Upe1xyXG4gICAgLy8gICAvLyDnlLHkuo4gZ2V0VXNlckluZm8g5piv572R57uc6K+35rGC77yM5Y+v6IO95Lya5ZyoIFBhZ2Uub25Mb2FkIOS5i+WQjuaJjei/lOWbnlxyXG4gICAgLy8gICAvLyDmiYDku6XmraTlpITliqDlhaUgY2FsbGJhY2sg5Lul6Ziy5q2i6L+Z56eN5oOF5Ya1XHJcbiAgICAvLyAgIGFwcC51c2VySW5mb1JlYWR5Q2FsbGJhY2sgPSAocmVzKSA9PiB7XHJcbiAgICAvLyAgICAgdGhpcy5zZXREYXRhISh7XHJcbiAgICAvLyAgICAgICB1c2VySW5mbzogcmVzLFxyXG4gICAgLy8gICAgICAgaGFzVXNlckluZm86IHRydWVcclxuICAgIC8vICAgICB9KVxyXG4gICAgLy8gICB9XHJcbiAgICAvLyB9IGVsc2Uge1xyXG4gICAgLy8gICAvLyDlnKjmsqHmnIkgb3Blbi10eXBlPWdldFVzZXJJbmZvIOeJiOacrOeahOWFvOWuueWkhOeQhlxyXG4gICAgLy8gICB3eC5nZXRVc2VySW5mbyh7XHJcbiAgICAvLyAgICAgc3VjY2VzczogcmVzID0+IHtcclxuICAgIC8vICAgICAgIGFwcC5nbG9iYWxEYXRhLnVzZXJJbmZvID0gcmVzLnVzZXJJbmZvXHJcbiAgICAvLyAgICAgICB0aGlzLnNldERhdGEhKHtcclxuICAgIC8vICAgICAgICAgdXNlckluZm86IHJlcy51c2VySW5mbyxcclxuICAgIC8vICAgICAgICAgaGFzVXNlckluZm86IHRydWVcclxuICAgIC8vICAgICAgIH0pXHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICB9KVxyXG4gICAgLy8gfVxyXG4gIH0sXHJcblxyXG4gIG9uU2hvdygpe1xyXG4gICAgY29uc29sZS5sb2coYG9uU2hvd2ApO1xyXG4gICAgdGhpcy5sb2FkUmVzZXJ2YXRpb24oMSwgMTApO1xyXG4gIH0sXHJcblxyXG4gIHByZXZQYWdlKCkge1xyXG4gICAgdGhpcy5sb2FkUmVzZXJ2YXRpb24oLS10aGlzLmRhdGEucGFnZU51bSwgdGhpcy5kYXRhLnBhZ2VTaXplKTtcclxuICB9LFxyXG5cclxuICBuZXh0UGFnZSgpIHtcclxuICAgIHRoaXMubG9hZFJlc2VydmF0aW9uKCsrdGhpcy5kYXRhLnBhZ2VOdW0sIHRoaXMuZGF0YS5wYWdlU2l6ZSk7XHJcbiAgfSxcclxuXHJcbiAgbG9hZFJlc2VydmF0aW9uKHBhZ2VOdW06bnVtYmVyLCBwYWdlU2l6ZTpudW1iZXIgPSAxMCl7XHJcbiAgICByZXNlcnZhdGlvblN2Yy5HZXQoKHJlc3VsdCk9PntcclxuICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcclxuICAgICAgKDxhbnk+dGhpcykuc2V0RGF0YSh7XHJcbiAgICAgICAgcGFnZU51bTogcmVzdWx0LlBhZ2VOdW1iZXIsXHJcbiAgICAgICAgcGFnZVNpemU6IHJlc3VsdC5QYWdlU2l6ZSxcclxuICAgICAgICB0b3RhbFBhZ2U6IHJlc3VsdC5QYWdlQ291bnQsXHJcbiAgICAgICAgdG90YWxDb3VudDogcmVzdWx0LlRvdGFsQ291bnQsXHJcbiAgICAgICAgcmVzZXJ2YXRpb25zOiByZXN1bHQuRGF0YVxyXG4gICAgICB9KTtcclxuICAgIH0sIHtcclxuICAgICAgcGFnZU51bWJlcjogcGFnZU51bSxcclxuICAgICAgcGFnZVNpemU6IHBhZ2VTaXplXHJcbiAgICB9KVxyXG4gIH0sXHJcbiAgZ2V0VXNlckluZm8oZTogYW55KSB7XHJcbiAgICBjb25zb2xlLmxvZyhlKVxyXG4gICAgYXBwLmdsb2JhbERhdGEudXNlckluZm8gPSBlLmRldGFpbC51c2VySW5mb1xyXG4gICAgdGhpcy5zZXREYXRhISh7XHJcbiAgICAgIHVzZXJJbmZvOiBlLmRldGFpbC51c2VySW5mbyxcclxuICAgICAgaGFzVXNlckluZm86IHRydWVcclxuICAgIH0pXHJcbiAgfVxyXG59KVxyXG4iXX0=