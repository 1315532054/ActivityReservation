"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ReservationService_1 = require("../../services/ReservationService");
var app = getApp();
var reservationSvc = new ReservationService_1.ReservationService();
Page({
    data: {
        userInfo: {},
        hasUserInfo: false,
        canIUse: wx.canIUse('button.open-type.getUserInfo'),
        pageNum: 1,
        pageSize: 8,
        totalPage: 1,
        totalCount: 0,
        reservations: []
    },
    onLoad: function () {
        console.log("onLoad");
    },
    onShow: function () {
        console.log("onShow");
        this.loadReservation(1, this.data.pageSize);
    },
    prevPage: function () {
        this.loadReservation(--this.data.pageNum, this.data.pageSize);
    },
    nextPage: function () {
        this.loadReservation(++this.data.pageNum, this.data.pageSize);
    },
    loadReservation: function (pageNum, pageSize) {
        var _this = this;
        if (pageSize === void 0) { pageSize = 10; }
        reservationSvc.Get(function (result) {
            console.log(result);
            _this.setData({
                pageNum: result.PageNumber,
                pageSize: result.PageSize,
                totalPage: result.PageCount,
                totalCount: result.TotalCount,
                reservations: result.Data
            });
        }, {
            pageNumber: pageNum,
            pageSize: pageSize
        });
    },
    getUserInfo: function (e) {
        console.log(e);
        app.globalData.userInfo = e.detail.userInfo;
        this.setData({
            userInfo: e.detail.userInfo,
            hasUserInfo: true
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLHdFQUF1RTtBQUV2RSxJQUFNLEdBQUcsR0FBRyxNQUFNLEVBQVUsQ0FBQTtBQUM1QixJQUFNLGNBQWMsR0FBRyxJQUFJLHVDQUFrQixFQUFFLENBQUM7QUFFaEQsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBQ0osUUFBUSxFQUFFLEVBQUU7UUFDWixXQUFXLEVBQUUsS0FBSztRQUNsQixPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQztRQUNuRCxPQUFPLEVBQUUsQ0FBQztRQUNWLFFBQVEsRUFBRSxDQUFDO1FBQ1gsU0FBUyxFQUFFLENBQUM7UUFDWixVQUFVLEVBQUUsQ0FBQztRQUNiLFlBQVksRUFBRSxFQUF3QjtLQUN2QztJQUNELE1BQU07UUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBNEJ4QixDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELGVBQWUsRUFBZixVQUFnQixPQUFjLEVBQUUsUUFBb0I7UUFBcEQsaUJBY0M7UUFkK0IseUJBQUEsRUFBQSxhQUFvQjtRQUNsRCxjQUFjLENBQUMsR0FBRyxDQUFDLFVBQUMsTUFBTTtZQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2QsS0FBSyxDQUFDLE9BQU8sQ0FBQztnQkFDbEIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxVQUFVO2dCQUMxQixRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7Z0JBQ3pCLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUztnQkFDM0IsVUFBVSxFQUFFLE1BQU0sQ0FBQyxVQUFVO2dCQUM3QixZQUFZLEVBQUUsTUFBTSxDQUFDLElBQUk7YUFDMUIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxFQUFFO1lBQ0QsVUFBVSxFQUFFLE9BQU87WUFDbkIsUUFBUSxFQUFFLFFBQVE7U0FDbkIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNELFdBQVcsRUFBWCxVQUFZLENBQU07UUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNkLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFBO1FBQzNDLElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRO1lBQzNCLFdBQVcsRUFBRSxJQUFJO1NBQ2xCLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvL2luZGV4LmpzXHJcbi8v6I635Y+W5bqU55So5a6e5L6LXHJcbmltcG9ydCB7IElNeUFwcCB9IGZyb20gJy4uLy4uL2FwcCc7XHJcbmltcG9ydCB7IFJlc2VydmF0aW9uIH0gZnJvbSAnLi4vLi4vbW9kZWxzL1Jlc2VydmF0aW9uJztcclxuaW1wb3J0IHsgUmVzZXJ2YXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvUmVzZXJ2YXRpb25TZXJ2aWNlJztcclxuXHJcbmNvbnN0IGFwcCA9IGdldEFwcDxJTXlBcHA+KClcclxuY29uc3QgcmVzZXJ2YXRpb25TdmMgPSBuZXcgUmVzZXJ2YXRpb25TZXJ2aWNlKCk7XHJcblxyXG5QYWdlKHtcclxuICBkYXRhOiB7XHJcbiAgICB1c2VySW5mbzoge30sXHJcbiAgICBoYXNVc2VySW5mbzogZmFsc2UsXHJcbiAgICBjYW5JVXNlOiB3eC5jYW5JVXNlKCdidXR0b24ub3Blbi10eXBlLmdldFVzZXJJbmZvJyksXHJcbiAgICBwYWdlTnVtOiAxLFxyXG4gICAgcGFnZVNpemU6IDgsXHJcbiAgICB0b3RhbFBhZ2U6IDEsXHJcbiAgICB0b3RhbENvdW50OiAwLFxyXG4gICAgcmVzZXJ2YXRpb25zOiBbXSBhcyBBcnJheTxSZXNlcnZhdGlvbj5cclxuICB9LFxyXG4gIG9uTG9hZCgpIHtcclxuICAgIGNvbnNvbGUubG9nKGBvbkxvYWRgKTtcclxuICAgIC8vIHRoaXMubG9hZFJlc2VydmF0aW9uKDEsIDEwKTtcclxuICAgIC8vIGlmIChhcHAuZ2xvYmFsRGF0YS51c2VySW5mbykge1xyXG4gICAgLy8gICB0aGlzLnNldERhdGEhKHtcclxuICAgIC8vICAgICB1c2VySW5mbzogYXBwLmdsb2JhbERhdGEudXNlckluZm8sXHJcbiAgICAvLyAgICAgaGFzVXNlckluZm86IHRydWUsXHJcbiAgICAvLyAgIH0pXHJcbiAgICAvLyB9IGVsc2UgaWYgKHRoaXMuZGF0YS5jYW5JVXNlKXtcclxuICAgIC8vICAgLy8g55Sx5LqOIGdldFVzZXJJbmZvIOaYr+e9kee7nOivt+axgu+8jOWPr+iDveS8muWcqCBQYWdlLm9uTG9hZCDkuYvlkI7miY3ov5Tlm55cclxuICAgIC8vICAgLy8g5omA5Lul5q2k5aSE5Yqg5YWlIGNhbGxiYWNrIOS7pemYsuatoui/meenjeaDheWGtVxyXG4gICAgLy8gICBhcHAudXNlckluZm9SZWFkeUNhbGxiYWNrID0gKHJlcykgPT4ge1xyXG4gICAgLy8gICAgIHRoaXMuc2V0RGF0YSEoe1xyXG4gICAgLy8gICAgICAgdXNlckluZm86IHJlcyxcclxuICAgIC8vICAgICAgIGhhc1VzZXJJbmZvOiB0cnVlXHJcbiAgICAvLyAgICAgfSlcclxuICAgIC8vICAgfVxyXG4gICAgLy8gfSBlbHNlIHtcclxuICAgIC8vICAgLy8g5Zyo5rKh5pyJIG9wZW4tdHlwZT1nZXRVc2VySW5mbyDniYjmnKznmoTlhbzlrrnlpITnkIZcclxuICAgIC8vICAgd3guZ2V0VXNlckluZm8oe1xyXG4gICAgLy8gICAgIHN1Y2Nlc3M6IHJlcyA9PiB7XHJcbiAgICAvLyAgICAgICBhcHAuZ2xvYmFsRGF0YS51c2VySW5mbyA9IHJlcy51c2VySW5mb1xyXG4gICAgLy8gICAgICAgdGhpcy5zZXREYXRhISh7XHJcbiAgICAvLyAgICAgICAgIHVzZXJJbmZvOiByZXMudXNlckluZm8sXHJcbiAgICAvLyAgICAgICAgIGhhc1VzZXJJbmZvOiB0cnVlXHJcbiAgICAvLyAgICAgICB9KVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgfSlcclxuICAgIC8vIH1cclxuICB9LFxyXG5cclxuICBvblNob3coKXtcclxuICAgIGNvbnNvbGUubG9nKGBvblNob3dgKTtcclxuICAgIHRoaXMubG9hZFJlc2VydmF0aW9uKDEsIHRoaXMuZGF0YS5wYWdlU2l6ZSk7XHJcbiAgfSxcclxuXHJcbiAgcHJldlBhZ2UoKSB7XHJcbiAgICB0aGlzLmxvYWRSZXNlcnZhdGlvbigtLXRoaXMuZGF0YS5wYWdlTnVtLCB0aGlzLmRhdGEucGFnZVNpemUpO1xyXG4gIH0sXHJcblxyXG4gIG5leHRQYWdlKCkge1xyXG4gICAgdGhpcy5sb2FkUmVzZXJ2YXRpb24oKyt0aGlzLmRhdGEucGFnZU51bSwgdGhpcy5kYXRhLnBhZ2VTaXplKTtcclxuICB9LFxyXG5cclxuICBsb2FkUmVzZXJ2YXRpb24ocGFnZU51bTpudW1iZXIsIHBhZ2VTaXplOm51bWJlciA9IDEwKXtcclxuICAgIHJlc2VydmF0aW9uU3ZjLkdldCgocmVzdWx0KT0+e1xyXG4gICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xyXG4gICAgICAoPGFueT50aGlzKS5zZXREYXRhKHtcclxuICAgICAgICBwYWdlTnVtOiByZXN1bHQuUGFnZU51bWJlcixcclxuICAgICAgICBwYWdlU2l6ZTogcmVzdWx0LlBhZ2VTaXplLFxyXG4gICAgICAgIHRvdGFsUGFnZTogcmVzdWx0LlBhZ2VDb3VudCxcclxuICAgICAgICB0b3RhbENvdW50OiByZXN1bHQuVG90YWxDb3VudCxcclxuICAgICAgICByZXNlcnZhdGlvbnM6IHJlc3VsdC5EYXRhXHJcbiAgICAgIH0pO1xyXG4gICAgfSwge1xyXG4gICAgICBwYWdlTnVtYmVyOiBwYWdlTnVtLFxyXG4gICAgICBwYWdlU2l6ZTogcGFnZVNpemVcclxuICAgIH0pXHJcbiAgfSxcclxuICBnZXRVc2VySW5mbyhlOiBhbnkpIHtcclxuICAgIGNvbnNvbGUubG9nKGUpXHJcbiAgICBhcHAuZ2xvYmFsRGF0YS51c2VySW5mbyA9IGUuZGV0YWlsLnVzZXJJbmZvXHJcbiAgICB0aGlzLnNldERhdGEhKHtcclxuICAgICAgdXNlckluZm86IGUuZGV0YWlsLnVzZXJJbmZvLFxyXG4gICAgICBoYXNVc2VySW5mbzogdHJ1ZVxyXG4gICAgfSlcclxuICB9XHJcbn0pXHJcbiJdfQ==