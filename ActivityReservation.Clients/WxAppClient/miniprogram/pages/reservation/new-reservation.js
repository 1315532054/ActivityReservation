"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ReservationService_1 = require("../../services/ReservationService");
var ReservationPlaceService_1 = require("../../services/ReservationPlaceService");
var Reservation_1 = require("../../models/Reservation");
var util = require("../../utils/util");
var reservationSvc = new ReservationService_1.ReservationService();
var reservationPlaceSvc = new ReservationPlaceService_1.ReservationPlaceService();
Page({
    data: {
        stepIndex: 0,
        places: [],
        placeNames: [],
        currentDate: new Date().getTime(),
        maxDate: util.addDays(new Date(), 7).getTime(),
        reservation: new Reservation_1.Reservation(),
        reservationPeriods: [],
        checkedPeriods: [],
    },
    onLoad: function (params) {
        var _this = this;
        console.log(params);
        reservationPlaceSvc.GetAll(function (result) {
            _this.setData({
                places: result,
                placeNames: result.map(function (p) { return p.PlaceName; })
            });
        });
    },
    onStepChange: function () {
        var _this = this;
        console.log("stepIndex:" + this.data.stepIndex + ",reservationInfo: " + JSON.stringify(this.data.reservation));
        switch (this.data.stepIndex) {
            case 0:
                break;
            case 1:
                if (!this.data.reservation.ReservationPlaceId) {
                    this.data.reservation.ReservationPlaceId = this.data.places[0].PlaceId;
                    this.data.reservation.ReservationPlaceName = this.data.places[0].PlaceName;
                }
                break;
            case 2:
                if (!this.data.reservation.ReservationForDate) {
                    this.data.reservation.ReservationForDate = util.formatDate(new Date());
                }
                reservationPlaceSvc.getAvailablePeriods(function (result) {
                    console.log(result);
                    _this.setData({
                        reservationPeriods: result
                    });
                }, this.data.reservation.ReservationPlaceId, this.data.reservation.ReservationForDate);
                break;
            case 3:
                console.log(this.data.reservationPeriods);
                this.data.reservation.ReservationForTimeIds = this.data.reservationPeriods.filter(function (_) { return _.Checked; }).map(function (x) { return x.PeriodIndex; }).join(",");
                this.data.reservation.ReservationForTime = this.data.reservationPeriods.filter(function (_) { return _.Checked; }).map(function (x) { return x.PeriodTitle; }).join(",");
                break;
            case 4:
                this.setData({
                    reservation: this.data.reservation
                });
                break;
        }
        return false;
    },
    prevStep: function (event) {
        this.data.stepIndex--;
        if (this.onStepChange()) {
        }
        this.setData({
            stepIndex: this.data.stepIndex
        });
    },
    nextStep: function (event) {
        this.data.stepIndex++;
        if (this.onStepChange()) {
        }
        this.setData({
            stepIndex: this.data.stepIndex
        });
    },
    onPlaceChange: function (event) {
        var _a = event.detail, picker = _a.picker, value = _a.value, index = _a.index;
        this.data.reservation.ReservationPlaceId = this.data.places[index].PlaceId;
        this.data.reservation.ReservationPlaceName = this.data.places[index].PlaceName;
    },
    onDateInput: function (event) {
        var dateStr = util.formatDate(new Date(event.detail));
        console.log("date: " + dateStr);
        this.data.reservation.ReservationForDate = dateStr;
    },
    onPeriodsChange: function (event) {
        console.log(event);
        var idxs = new Array();
        for (var _i = 0, _a = event.detail; _i < _a.length; _i++) {
            var name_1 = _a[_i];
            var idx = Number.parseInt(name_1.substr(7));
            idxs.push(idx);
        }
        for (var _b = 0, _c = this.data.reservationPeriods; _b < _c.length; _b++) {
            var p = _c[_b];
            if (idxs.indexOf(p.PeriodIndex) > -1) {
                p.Checked = true;
            }
        }
        this.setData({
            checkedPeriods: event.detail
        });
    },
    onUnitChange: function (event) {
        console.log(event);
        this.data.reservation.ReservationUnit = event.detail;
    },
    onActivityContentChange: function (event) {
        console.log(event);
        this.data.reservation.ReservationActivityContent = event.detail;
    },
    onPersonNameChange: function (event) {
        console.log(event);
        this.data.reservation.ReservationPersonName = event.detail;
    },
    onPersonPhoneChange: function (event) {
        console.log(event);
        this.data.reservation.ReservationPersonPhone = event.detail;
    },
    submit: function (event) {
        reservationSvc.NewReservation(function (result) {
            console.log(result);
            if (result.Status == 200) {
                wx.reLaunch({
                    url: '/pages/index/index'
                });
            }
        }, this.data.reservation, 'None', '');
    }
});
//# sourceMappingURL=data:application/json;base64,